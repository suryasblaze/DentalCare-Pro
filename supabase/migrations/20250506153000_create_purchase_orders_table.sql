-- Create the purchase_orders table
CREATE TABLE public.purchase_orders (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    po_number TEXT NOT NULL UNIQUE, -- To be generated by a function, e.g., PO-YYYY-NNNN
    supplier_id UUID NOT NULL REFERENCES public.suppliers(id) ON DELETE RESTRICT,
    order_date DATE NOT NULL DEFAULT CURRENT_DATE,
    expected_delivery_date DATE,
    status TEXT NOT NULL DEFAULT 'Pending' CHECK (status IN ('Pending', 'Ordered', 'Partially Received', 'Received', 'Cancelled')),
    total_amount NUMERIC(12, 2) DEFAULT 0.00, -- Can be calculated from items or entered
    notes TEXT,
    created_by UUID REFERENCES public.profiles(id) ON DELETE SET NULL, -- User who created the PO
    created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Add indexes
CREATE INDEX idx_purchase_orders_supplier_id ON public.purchase_orders(supplier_id);
CREATE INDEX idx_purchase_orders_status ON public.purchase_orders(status);
CREATE INDEX idx_purchase_orders_order_date ON public.purchase_orders(order_date);

-- Enable Row Level Security (RLS)
ALTER TABLE public.purchase_orders ENABLE ROW LEVEL SECURITY;

-- RLS Policies
-- Allow authenticated users to view purchase orders (adjust based on roles if needed)
CREATE POLICY "Allow authenticated users to view purchase orders"
ON public.purchase_orders
FOR SELECT
TO authenticated
USING (true); -- Or restrict by created_by or role

-- Allow admin/manager to insert purchase orders
CREATE POLICY "Allow admin/manager to insert purchase orders"
ON public.purchase_orders
FOR INSERT
TO authenticated
WITH CHECK (
    (SELECT role FROM public.profiles WHERE id = auth.uid()) IN ('admin', 'inventory_manager') AND
    created_by = auth.uid()
);

-- Allow admin/manager who created the PO or other admins/managers to update
CREATE POLICY "Allow admin/manager to update purchase orders"
ON public.purchase_orders
FOR UPDATE
TO authenticated
USING (
    (SELECT role FROM public.profiles WHERE id = auth.uid()) IN ('admin', 'inventory_manager')
)
WITH CHECK (
    (SELECT role FROM public.profiles WHERE id = auth.uid()) IN ('admin', 'inventory_manager')
);

-- Allow admin/manager to delete purchase orders (typically soft delete or cancel status is preferred)
CREATE POLICY "Allow admin/manager to delete purchase orders"
ON public.purchase_orders
FOR DELETE
TO authenticated
USING (
    (SELECT role FROM public.profiles WHERE id = auth.uid()) IN ('admin', 'inventory_manager')
);

-- Function to update 'updated_at' timestamp
CREATE OR REPLACE FUNCTION public.handle_purchase_order_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = timezone('utc'::text, now());
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to automatically update 'updated_at'
CREATE TRIGGER on_purchase_orders_updated_at
BEFORE UPDATE ON public.purchase_orders
FOR EACH ROW
EXECUTE FUNCTION public.handle_purchase_order_updated_at();

-- Comments
COMMENT ON TABLE public.purchase_orders IS 'Stores header information for purchase orders.';
COMMENT ON COLUMN public.purchase_orders.po_number IS 'Unique purchase order number (e.g., PO-YYYY-NNNN).';
COMMENT ON COLUMN public.purchase_orders.status IS 'Current status of the purchase order (Pending, Ordered, Partially Received, Received, Cancelled).';
COMMENT ON COLUMN public.purchase_orders.total_amount IS 'Estimated or actual total amount for the purchase order.';
COMMENT ON COLUMN public.purchase_orders.created_by IS 'User who initially created the purchase order.';
